//
//  NewsViewController.swift
//  swift-clean-arch
//
//  Created by Admin on 30/09/2019.
//  Copyright (c) 2019 Vladlin Moiseenko. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NewsListDisplayLogic: class {
    func displayNews(news: [News])
}

class NewsListViewController: UIViewController, NewsListDisplayLogic {
    
    var interactor: NewsListBusinessLogic?
    var router: NewsListRoutingLogic?
    @IBOutlet weak var tableView: UITableView!
    let cellIdentifier = "Cell"
    private var selectedNews: News!
    private var news: [News] = []
    private let cellXibName = "NewsTableViewCell"
    private let screenTitle = "clean-swift-architecture"
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = NewsListInteractor()
        let presenter = NewsListPresenter()
        let router = NewsListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        interactor.newsFetcher = NewsListWorker()
        presenter.viewController = viewController
        router.viewController = viewController
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setScreenTitle()
        configureTableView()
        interactor?.fetchNews()
    }
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        let showNewsSegueId = Constants.showNewsDetailsSegueIdentifier.rawValue
        if segue.identifier == showNewsSegueId {
            if let viewController = segue.destination as? NewsDetailsViewController {
                viewController.selectedNews = selectedNews
            }
        }
    }
    
    // MARK: Private methods
    
    private func setScreenTitle() {
        title = screenTitle
    }
    
    private func configureTableView() {
        tableView.register(UINib(nibName: cellXibName, bundle: nil), forCellReuseIdentifier: cellIdentifier)
    }
    
    // MARK: Public methods
    
    func displayNews(news: [News]) {
        self.news = news
        DispatchQueue.main.async {
            self.tableView.reloadData()
        }
    }
    
}

extension NewsListViewController: UITableViewDataSource, UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return news.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let newsCell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier,
                                                        for: indexPath) as? NewsTableViewCell
        guard let cell = newsCell else { return UITableViewCell() }
        cell.configure(news[indexPath.row])
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        selectedNews = news[indexPath.row]
        router?.navigateToNewsDetailsScreen()
    }
}
